A Data Value is what is held by variables. There are 8 types of Data Values, which are:
	int
	float
	bool
	string
	table
	function / code block
	enviroment
	null



Each data type can be indexed. Arrays act exactly how you'd expect, so array[key] would give you the value for that
key. You could also do array.key, and this would act as array["key"]. You can use this type of indexing for any type
of Data Value (DV), not just tables. Here are all the indexes you can read and write to for all types of DVs:

int:
	.sign     // string; either "+" or "-"
	.signInt  // int; either 1 for + or 0 for -
	.signBool // bool; either true for + or false for -

float:
	.sign     // string; either "+" or "-"
	.signInt  // int; either 1 for + or 0 for -
	.signBool // bool; either true for + or false for -

bool:
	[none]
string:
	.length // int; length of string
	.sub    // function; takes either 1 or 2 ints, return substring; errors if no ints given
	.find   // function; takes string as first arg as a pattern and an optional int as the second arg, returns index of the found pattern or null if pattern not found; errors if string not given
	.chatAt // function; takes int as first arg, returns character at index; errors if int not given
table:
	.length // int; length of table
	.sub    // function; takes either 1 or 2 ints, returns subset of table; errors if no ints given
	.find   // function; takes DV as arg and returns the first found key that holds that DV; errors if no DV given
	.keys   // array of DVs; contains an array of all this table's used keys
	.onOperation // function; takes DV as first arg and string as second arg. by default, only works with ".." as second arg, and concats the first arg with the table; errors with incorrect args
	.removeNativeKeys // functions; disables these keys
function:
	.arguments // array of strings; contains the name of the arguments used by the function
enviroment:
	.returnValue // DV; value returned by enviroment; used for requiring modules
null:
	[none]
all:
	.castTo // function; takes string as first arg, which defines the new data type to cast to; errors if string not given as first arg
	.clone  // function; returns clone of DV