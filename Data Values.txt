A Data Value is what is held by variables. There are 7 types of Data Values, which are:
	int
	float
	bool
	string
	table
	function / code block
	intarray
	floatarray
	stringarray
	null



Each data type can be indexed. Tables act exactly how you'd expect, so table[key] would
give you the value for that key. You could also do table.key, and this would act as
table["key"]. You can use this type of indexing for any type of Data Value (DV), not just
tables. Here are all the indexes you can read and write to for all types of DVs:

int:
	.sign     // string; either "+" or "-"
	.signInt  // int; either 1 for + or 0 for -
	.signBool // bool; either true for + or false for -
float:
	.sign     // string; either "+" or "-"
	.signInt  // int; either 1 for + or 0 for -
	.signBool // bool; either true for + or false for -
bool:
	[none]
string:
	.length // int; length of string
	.sub    // function; takes either 1 or 2 ints, return substring; errors if no ints given
	.find   // function; takes string as first arg as a pattern and an optional int as the second arg, returns index of the found pattern or null if pattern not found; errors if string not given
	.chatAt // function; takes int as first arg, returns character at index; errors if int not given
	.isNum  // function; return whether this string could be cast as a num
	[int Index] // string; returns char at index Index
table:
	.length // int; length of table
	.sub    // function; takes either 1 or 2 ints, returns subset of table; errors if no ints given
	.find   // function; takes DV as arg and returns the first found key that holds that DV; errors if no DV given
	.keys   // array of DVs; contains an array of all this table's used keys
	.insert // function; takes DV and optional int as args, inserts DV at specified pos or end; errors if no DV given
	.remove // function; takes optional int as arg, removes and returns the DV at specified pos or end; errors if anything but int or null given as arg
	.onOperation // function; takes DV as first arg and string as second arg. by default, only works with ".." as second arg, and concats the first arg with the table; errors with incorrect args
	[DV Key] // DV; returns value at specified key
	.removeNativeKeys // functions; disables these keys
	.lockTable // function; marks table as read-only; no keys can be written to
function:
	[none]
intarray:
	.length // int; length of array
	.sub    // function; takes either 1 or 2 ints, returns subset of array; errors if no ints given
	.find   // function; takes int as arg and returns the first found index that holds that int; errors if no int given
	.insert // function; takes int and optional second int as args, inserts int at specified pos or end; errors if no int given
	.remove // function; takes optional int as arg, removes and returns the int at specified pos or end; errors if anything but int or null given as arg
	[int Index] // int; int at pos Index
floatarray:
	.length // int; length of array
	.sub    // function; takes either 1 or 2 ints, returns subset of array; errors if no ints given
	.find   // function; takes float as arg and returns the first found index that holds that float; errors if no float given
	.insert // function; takes float and optional int as args, inserts float at specified pos or end; errors if no float given
	.remove // function; takes optional int as arg, removes and returns the float at specified pos or end; errors if anything but int or null given as arg
	[int Index] // float; float at pos Index
stringarray:
	.length // int; length of array
	.sub    // function; takes either 1 or 2 ints, returns subset of array; errors if no ints given
	.find   // function; takes string as arg and returns the first found index that holds that string; errors if no string given
	.insert // function; takes string and optional int as args, inserts string at specified pos or end; errors if no string given
	.remove // function; takes optional int as arg, removes and returns the string at specified pos or end; errors if anything but int or null given as arg
	[int Index] // string; string at pos Index
null:
	[none]
all:
	.castTo // function; takes string as first arg, which defines the new data type to cast to; errors if string not given as first arg
	.clone  // function; returns clone of DV